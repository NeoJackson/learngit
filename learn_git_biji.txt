1.在一个项目根目录中初始化一个Git仓库 命令：git init
2.添加文件到Git仓库，分两步：
	第一步：使用命令：git add <file>    如：git add readme.txt    注意：可反复多次使用，添加多个文件;
	第二步：使用命令：git commit   如：git commit -m "这是提交描述信息"
3.查看当前仓库状态：命令：git status   如：git status
4.想要查看上一次怎么修改的readme.txt，可以用命令： git diff     
  如：git diff readme.txt 或者 git diff HEAD -- readme.txt    可以查看工作区和版本库里面最新版本的区别
5.配置查看git信息：
	一、配制用户名：git config --global user.name "NeoJackson"
	二、配制email：git config --global user.name “neo_jackson@163.com"
	三、查看配制信息：git config --list
6.查看当前git版本：命令：git --version
7.获取git帮助，命令：git help  如：git help     如看某个特定用法如：git help add
8.查看git提交日志历史记录，命令：git log    按q退出
  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数  如：git log --pretty=oneline
  你看到的一大串类似3628164...882e1e0的是commit id（版本号）
9.直接自动提交已经通过git add 追踪的文件，也就是修改过的文件且之前已经通过git add 操作的文件，
  (未通过 git add 添加过的文件是无效的) 可以一步到位，就不需要走缓存区了，直接提交到仓库中，
  使用命令：git commit -a -m "直接加个-a 这个参数就行了”
10.删除文件，命令：rm readme.text     在操作系统级别删除一个文件
   从git中删除文件，命令：git rm readme.txt   再提交操作，命令：git commit -m "delete readme.txt"
   这个删除的文件只是当前版本的，它依然被记录在git仓库历史中，在历史版本中依然还是可以找到的！
11.重命名文件：
	一、命令：如：git mv readme.txt readme.text
	二、提交命令：git commit -m "rename readme.txt"
	相当于执行了以下三条命令：
		1.mv readme.txt readme.text
		2.git rm readme.text
		3.git add readme.text
12.回滚到历史某个版本，命令：如：git reset --hard HEAD^    这是回到离当前版本的上一个版本
   1个^表示上一个版本，2个^表示上上个版本，如：git reset --hard HEAD^^   以此类推。
   当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100  如：git reset --hard HEAD~100
   也可以直接回滚到具体某个commit id是，如：git reset --hard 3723342
   git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
   命令，如：git reset HEAD readme.txt
13.查看每一次执行过的命令：如：git reflog      通过这个也可以很容易看到每个版本的commit id号等，以便回到未来版本
14.让文件回到最近一次 git commit 或 git add 时的状态，命令，如：git checkout -- readme.txt
	git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令
	
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

15.远程仓库 gitHub上建立远程仓库（去github.com官网注册帐号）
	第1步：创建SSH Key   命令，如：ssh-keygen -t rsa -C "neo_jackson@163.com"      密码：neojackson
			在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
			如果没有，打开Shell（Windows下打开Git Bash）ssh-keygen -t rsa -C "neo_jackson@163.com"
			在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容  点“Add Key”，你就应该看到已经添加的Key；
			为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
			当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
			在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
			如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。
	第3步：把本地仓库的内容与gitHub上仓库关联，在本地的learngit仓库下运行命令：git remote add origin git@github.com:NeoJackson/learngit.git
			请千万注意，把上面的NeoJackson替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
			添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	第4步：把本地库的所有内容推送到远程库上：git push -u origin master
		   把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		   由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	第5步：从现在起，只要本地作了提交，就可以通过命令：git push origin master  把本地mater分支的最新修改推送至gitHub上，现在你就拥有了真正的分布式版本库！

	SSH警告：当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
			The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
			RSA key fingerprint is xx.xx.xx.xx.xx.
			Are you sure you want to continue connecting (yes/no)?
			
			这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
			arning: Permanently added 'github.com' (RSA) to the list of known hosts.
			这个警告只会出现一次，后面的操作就不会有任何警告了。
			如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。

	小结
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	   

16.从远程库克隆   命令，如： git clone git@github.com:NeoJackson/gitskills.git
	上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。
	现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
	首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
	我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
	现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
	命令，如：git clone git@github.com:NeoJackson/gitskills.git   
	如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/NeoJackson/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。   
	   
17.创建与合并分支
   创建  git checkout -b dev
   首先，我们创建dev分支，然后切换到dev分支：git checkout -b dev
   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
   git branch dev
   git checkout dev
   然后，用git branch命令查看当前分支：如：git branch
   * dev
   master
   git branch命令会列出所有分支，当前分支前面会标一个*号。然后，我们就可以在dev分支上正常提交
   比如对readme.txt做个修改，
   加上一行：Creating a new branch is quick.
   然后提交：git add readme.txt      git commit -m "branch test"
   现在，dev分支的工作完成，我们就可以切换回master分支：git checkout master
   切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
   
   合并分支dev：git merge dev
   现在，我们把dev分支的工作成果合并到master分支上：git merge dev
   git merge命令用于合并指定分支到当前分支   合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
	   
	   
   删除分支dev：git branch -d dev
   合并完成后，就可以放心地删除dev分支了：git branch -d dev
   删除后，查看branch，就只剩下master分支了：git branch
   * master
   
   因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
	   
	   
   小结
		Git鼓励大量使用分支：
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
		
18.解决冲突
   准备新的feature1分支，继续我们的新分支开发：git checkout -b feature1
   修改readme.txt最后一行，改为：Creating a new branch is quick AND simple.
   在feature1分支上提交：git add readme.txt     git commit -m "AND simple"
   切换到master分支：git checkout master      Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。
   在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick & simple.
   提交：git add readme.txt    git commit -m "& simple"
   现在，master分支和feature1分支各自都分别有新的提交
   这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突
   git merge feature1
   git status也可以告诉我们冲突的文件
   我们可以直接查看readme.txt的内容： cat readme.txt
   Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：Creating a new branch is quick and simple.
   再提交：git add readme.txt    git commit -m "conflict fixed"
   用带参数的git log也可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit
   现在，删除feature1分支：git branch -d feature1
   
   小结
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		用git log --graph命令可以看到分支合并图。
   
19.分支管理策略
   通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
   如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。