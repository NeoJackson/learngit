1.在一个项目根目录中初始化一个Git仓库 命令：git init
2.添加文件到Git仓库，分两步：
	第一步：使用命令：git add <file>    如：git add readme.txt    注意：可反复多次使用，添加多个文件;
	第二步：使用命令：git commit   如：git commit -m "这是提交描述信息"
3.查看当前仓库状态：命令：git status   如：git status
4.想要查看上一次怎么修改的readme.txt，可以用命令： git diff     如：git diff readme.txt
5.配置查看git信息：
	一、配制用户名：git config --global user.name "NeoJackson"
	二、配制email：git config --global user.name “neo_jackson@163.com"
	三、查看配制信息：git config --list
6.查看当前git版本：命令：git --version
7.获取git帮助，命令：git help  如：git help     如看某个特定用法如：git help add
8.查看git提交日志历史记录，命令：git log  如：git log        按q退出 
  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上?--pretty=oneline参数   如：git log --pretty=oneline  
  你看到的一大串类似3628164...882e1e0的是commit id（版本号）
9.直接自动提交已经通过git add 追踪的文件，也就是修改过的文件且之前已经通过git add 操作的文件，
  (未通过 git add 添加过的文件是无效的) 可以一步到位，就不需要走缓存区了，直接提交到仓库中，
  使用命令：git commit -a -m "直接加个-a 这个参数就行了”
10.删除文件，命令：rm readme.text     在操作系统级别删除一个文件
   从git中删除文件，命令：git rm readme.txt   再提交操作，命令：git commit -m "delete readme.txt"
   这个删除的文件只是当前版本的，它依然被记录在git仓库历史中，在历史版本中依然还是可以找到的！
11.重命名文件：
	一、命令：如：git mv readme.txt readme.text
	二、提交命令：git commit -m "rename readme.txt"
	相当于执行了以下三条命令：
		1.mv readme.txt readme.text
		2.git rm readme.text
		3.git add readme.text