1.在一个项目根目录中初始化一个Git仓库 命令：git init
2.添加文件到Git仓库，分两步：
	第一步：使用命令：git add <file>    如：git add readme.txt    注意：可反复多次使用，添加多个文件;
	第二步：使用命令：git commit   如：git commit -m "这是提交描述信息"
3.查看当前仓库状态：命令：git status   如：git status
4.想要查看上一次怎么修改的readme.txt，可以用命令： git diff     
  如：git diff readme.txt 或者 git diff HEAD -- readme.txt    可以查看工作区和版本库里面最新版本的区别
5.配置查看git信息：
	一、配制用户名：git config --global user.name "NeoJackson"
	二、配制email：git config --global user.name “neo_jackson@163.com"
	三、查看配制信息：git config --list
6.查看当前git版本：命令：git --version
7.获取git帮助，命令：git help  如：git help     如看某个特定用法如：git help add
8.查看git提交日志历史记录，命令：git log    按q退出
  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数  如：git log --pretty=oneline
  你看到的一大串类似3628164...882e1e0的是commit id（版本号）
9.直接自动提交已经通过git add 追踪的文件，也就是修改过的文件且之前已经通过git add 操作的文件，
  (未通过 git add 添加过的文件是无效的) 可以一步到位，就不需要走缓存区了，直接提交到仓库中，
  使用命令：git commit -a -m "直接加个-a 这个参数就行了”
10.删除文件，命令：rm readme.text     在操作系统级别删除一个文件
   从git中删除文件，命令：git rm readme.txt   再提交操作，命令：git commit -m "delete readme.txt"
   这个删除的文件只是当前版本的，它依然被记录在git仓库历史中，在历史版本中依然还是可以找到的！
11.重命名文件：
	一、命令：如：git mv readme.txt readme.text
	二、提交命令：git commit -m "rename readme.txt"
	相当于执行了以下三条命令：
		1.mv readme.txt readme.text
		2.git rm readme.text
		3.git add readme.text
12.回滚到历史某个版本，命令：如：git reset --hard HEAD^    这是回到离当前版本的上一个版本
   1个^表示上一个版本，2个^表示上上个版本，如：git reset --hard HEAD^^   以此类推。
   当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100  如：git reset --hard HEAD~100
   也可以直接回滚到具体某个commit id是，如：git reset --hard 3723342
   git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
   命令，如：git reset HEAD readme.txt
13.查看每一次执行过的命令：如：git reflog      通过这个也可以很容易看到每个版本的commit id号等，以便回到未来版本
14.让文件回到最近一次 git commit 或 git add 时的状态，命令，如：git checkout -- readme.txt
	git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令
	
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

15.远程仓库 gitHub上建立远程仓库（去github.com官网注册帐号）
	第1步：创建SSH Key   命令，如：ssh-keygen -t rsa -C "neo_jackson@163.com"      密码：neojackson
			在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
			如果没有，打开Shell（Windows下打开Git Bash）ssh-keygen -t rsa -C "neo_jackson@163.com"
			在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容  点“Add Key”，你就应该看到已经添加的Key；
			为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
			当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
			在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
			如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。
	第3步：把本地仓库的内容与gitHub上仓库关联，在本地的learngit仓库下运行命令：git remote add origin git@github.com:NeoJackson/learngit.git
			请千万注意，把上面的NeoJackson替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
			添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	第4步：把本地库的所有内容推送到远程库上：git push -u origin master
		   把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		   由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	第5步：从现在起，只要本地作了提交，就可以通过命令：git push origin master  把本地mater分支的最新修改推送至gitHub上，现在你就拥有了真正的分布式版本库！

	SSH警告：当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
			The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
			RSA key fingerprint is xx.xx.xx.xx.xx.
			Are you sure you want to continue connecting (yes/no)?
			
			这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
			arning: Permanently added 'github.com' (RSA) to the list of known hosts.
			这个警告只会出现一次，后面的操作就不会有任何警告了。
			如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。

	小结
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	   

16.从远程库克隆   命令，如： git clone git@github.com:NeoJackson/gitskills.git
	上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。
	现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
	首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
	我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
	现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
	命令，如：git clone git@github.com:NeoJackson/gitskills.git   
	如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/NeoJackson/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。   
	   
17.创建与合并分支
   创建  git checkout -b dev
   首先，我们创建dev分支，然后切换到dev分支：git checkout -b dev
   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
   git branch dev
   git checkout dev
   然后，用git branch命令查看当前分支：如：git branch
   * dev
   master
   git branch命令会列出所有分支，当前分支前面会标一个*号。然后，我们就可以在dev分支上正常提交
   比如对readme.txt做个修改，
   加上一行：Creating a new branch is quick.
   然后提交：git add readme.txt      git commit -m "branch test"
   现在，dev分支的工作完成，我们就可以切换回master分支：git checkout master
   切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
   
   合并分支dev：git merge dev
   现在，我们把dev分支的工作成果合并到master分支上：git merge dev
   git merge命令用于合并指定分支到当前分支   合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
	   
	   
   删除分支dev：git branch -d dev
   合并完成后，就可以放心地删除dev分支了：git branch -d dev
   删除后，查看branch，就只剩下master分支了：git branch
   * master
   
   因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
	   
	   
   小结
		Git鼓励大量使用分支：
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
		
18.解决冲突
   准备新的feature1分支，继续我们的新分支开发：git checkout -b feature1
   修改readme.txt最后一行，改为：Creating a new branch is quick AND simple.
   在feature1分支上提交：git add readme.txt     git commit -m "AND simple"
   切换到master分支：git checkout master      Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。
   在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick & simple.
   提交：git add readme.txt    git commit -m "& simple"
   现在，master分支和feature1分支各自都分别有新的提交
   这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突
   git merge feature1
   git status也可以告诉我们冲突的文件
   我们可以直接查看readme.txt的内容： cat readme.txt
   Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：Creating a new branch is quick and simple.
   再提交：git add readme.txt    git commit -m "conflict fixed"
   用带参数的git log也可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit
   现在，删除feature1分支：git branch -d feature1
   
   小结
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		用git log --graph命令可以看到分支合并图。
   
19.分支管理策略
   通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
   如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
   下面我们实战一下--no-ff方式的git merge：首先，仍然创建并切换dev分支：git checkout -b dev
   修改readme.txt文件，并提交一个新的commit：git add readme.txt   git commit -m "add merge"
   现在，我们切换回master：git checkout master
   准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：  
   git merge --no-ff -m "merge with no-ff" dev      因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
   合并后，我们用git log看看分支历史  git log --graph --pretty=oneline --abbrev-commit
   
   分支策略
	 在实际开发中，我们应该按照几个基本原则进行分支管理：
	 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	 那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	 你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	 
   小结
	 Git分支十分强大，在团队开发中应该充分应用。
	 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	 
20.Bug分支
   软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
   当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：  git status
   并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
   幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作： git stash
   现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
   首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：  git checkout master    git checkout -b issue-101
   现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：   git add readme.txt    git commit -m "fix bug 101"
   修复完成后，切换到master分支，并完成合并，最后删除issue-101分支： git checkout master   git merge --no-ff -m "merged bug fix 101" issue-101   git branch -d issue-101
   太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！  git checkout dev   git status
   工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：git stash list
   
   工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；   git stash apply stash@{0}       git stash drop  stash@{0}
	另一种方式是用git stash pop，恢复的同时把stash内容也删了：命令，如：git stash pop
	再用git stash list查看，就看不到任何stash内容了：git stash list

	小结
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
		
21.Feature分支
   软件开发中，总有无穷无尽的新的功能要不断添加进来。
   添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
   现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
   于是准备开发：git checkout -b feature-vulcan
   5分钟后，开发完毕：git add vulcan.py    git status    git commit -m "add feature vulcan"
   切回dev，准备合并：git checkout dev
   一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
   但是，
   就在此时，接到上级命令，因经费不足，新功能必须取消！
   虽然白干了，但是这个分支还是必须就地销毁：git branch -d feature-vulcan
   error: The branch 'feature-vulcan' is not fully merged.
   If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
   销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
   现在我们强行删除：git branch -D feature-vulcan
   
   小结   
		开发一个新feature，最好新建一个分支；
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
   
   
   
多人协作：

22.要查看远程库的信息，用git remote：
23.用git remote -v显示更详细的信息：
	git remote -v
	origin  git@github.com:NeoJackson/learngit.git (fetch)
	origin  git@github.com:NeoJackson/learngit.git (push)
	上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
23.推送分支
	推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
	git push origin master
	如果要推送其他分支，比如dev，就改成：git push origin dev
	但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
	master分支是主分支，因此要时刻与远程同步；
	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
24.抓取分支
	多人协作时，大家都会往master和dev分支上推送各自的修改。
	现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：git clone git@github.com:NeoJackson/learngit.git
	当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：git branch
	现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：git checkout -b dev origin/dev
	现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：git commit -m "add /usr/bin/env"      git push origin dev
	
	你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：git add hello.py     git commit -m "add coding: utf-8"   git push origin dev
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：git pull
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：git branch --set-upstream dev origin/dev
	再pull：git pull    这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：   git commit -m "merge & fix hello.py"     git push origin dev
	

	因此，多人协作的工作模式通常是这样：
		1.首先，可以试图用git push origin branch-name推送自己的修改；
		2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		3.如果合并有冲突，则解决冲突，并在本地提交；
		4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
		这就是多人协作的工作模式，一旦熟悉了，就非常简单。
		
小结
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

   
25.标签管理
	发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
	Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
	
	创建标签
		在Git中打标签非常简单，首先，切换到需要打标签的分支上：git branch   git checkout master
		然后，敲命令git tag <name>就可以打一个新标签：git tag v1.0
		可以用命令git tag查看所有标签：git tag
		默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
		方法是找到历史提交的commit id，然后打上就可以了：git log --pretty=oneline --abbrev-commit
		比方说要对“add merge”这次提交打标签，它对应的commit id是6224937，敲入命令：git tag v0.9 6224937
		再用命令git tag查看标签： git tag
		注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：git show v0.9    可以看到，v0.9确实打在“add merge”这次提交上。
		还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：git tag -a v0.1 -m "version 0.1 released" 3628164
		用命令git show <tagname>可以看到说明文字：git show v0.1
		还可以通过-s用私钥签名一个标签：git tag -s v0.2 -m "signed version 0.2 released" fec145a
		签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
		gpg: signing failed: secret key not available
		error: gpg failed to sign the data
		error: unable to sign the tag
		如果报错，请参考GnuPG帮助文档配置Key。
		用命令git show <tagname>可以看到PGP签名信息：git show v0.2
		用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。
		
	小结
		命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		命令git tag可以查看所有标签。
		
   
   
   
   
		
		